country
country <- c("US", "UK", "IND", "AF", "AUS")
country[1]
country
country[c(1,4)]
country[c(1,14)]
# Slicing
vec <- c(1:10)
vec
vec[c(1:5)]
vec[c(3:15)]
vec[1:5]
vec50 <- c(50:100)
vec50
vec5 <- c(50:100)
vec5
vec6 <- 50:100
vec6
vec6[10:]
vec6[10:20]
vec6[10:-1]
vec6[10:20]
10+2
length(vec6)
20+10
mat<- matrix(1:25)
mat
mat<- matrix(1:25, rows=5)
mat<- matrix(1:25, nrow=5)
mat
mat<- matrix(1:25, nrow=5, byrow=TRUE)
mat
mat<- matrix(1:25, nrow=5, byrow=FALSE)
mat
mat<- matrix(1:25)
mat
mat2<- matrix(1:25, nrow=5, byrow=FALSE)
mat2
mat3<- matrix(1:25, nrow=5, byrow=TRUE)
mat3
mat3<- matrix(1:25, nrow=5, byrow=FALSE)
mat3
vec <- c(21,24,26,89)
vec <- c(21,24,26,89)
matrix(vec, nrow=2)
matrix(vec, ncol=4)
mat4 <- matrix(101:125, nrow=5)
mat4
source("D:/Practice/R/20210621_P2.r", echo=TRUE)
source("D:/Practice/R/20210621_P2.r", echo=TRUE)
rownames(mat4) <- c("Row_1", "Row_2","Row_3","Row_4","Row_5")
mat4
colnames(mat4) <- c("Col_1", "Col_2","Col_3","Col_4","Col_5")
mat4
colnames(mat4) <- c("Wk1", "Wk2","Wk3","Wk4","Wk5")
mat4
mat4[2,3]
mat4[2,]
mat4[,4]
mat4[2][3]
mat4[5,c(4,5)]
mat4[c(1,5),c(4,5)]
print("Hot")
temp <- 25
if(temp < 20) print("Cold")
else if (temp < 30) print("Moderate")
else print("Hot")
temp <- 25
if(temp < 20)
print("Cold")
else if (temp < 30)
print("Moderate")
else
print("Hot")
temp <- 25
if(temp < 20){
print("Cold")
}
else if (temp < 30){
print("Moderate")
}
else{
print("Hot")
}
temp <- 25
if(temp < 20){
print("Cold")
}else if (temp < 30){
print("Moderate")
}else{
print("Hot")
}
a <- 20
if (a%2 == 0)
print("Even")
else
print("Odd")
print(a%2)
a <- 20
print(a%2)
print(a%%2)
a <- 20
#print(a%%2)
if (a%%2 == 0)
print("Even")
else
print("Odd")
num <- readline(propt = "Enter the num")
print(typeof(num))
num <- readline(propt = "Enter the num")
num <- readline(prompt = "Enter the num")
print(typeof(num))
num <- readline(prompt = "Enter the num - ")
print(numeric(num))
print(typeof(num))
print(numeric(num))
print(numeric(num))
print(as.integer(num))
# Datataype conversion
num2 <- as.integer(num)
num2 <- as.number(num)
num <- readline(prompt = "Enter the num - ")
print(typeof(num))
num2 <- as.number(num)
num2<- as.number(num)
num <- readline(prompt = "Enter the num - ")
# Datataype conversion
num<- as.number(num)
num<- as.numeric(num)
print(typeof(num))
num <- readline(prompt = "Enter the num - ")
num<- as.numeric(num)
print(typeof(num))
names<- c('R', 'Python', 'SAS')
for(name in names){
print(name)
}
marks <- c(24, 25, 20, 19, 21.5)
for(mark in marks){
print(mark)
}
marks <- c(24, 25, 20, 19, 21.5)
for(mark in marks){
print(typeof(mark))
print(mark)
}
marks <- c(24, 25, 20, 19, 21)
for(mark in marks){
print(typeof(mark))
print(mark)
}
for(i in 1:10)
print(i)
for(i in 1:10)
print(i*5)
vec <- c(1:10)
for (i in vec){
print(paste("5 *", i, "=", i*5))
}
vec <- c(1:10)
for (i in vec){
print(paste0("5 *", i, "=", i*5))
}
car <- mtcars
view(car)
car <- mtcars
View(car)
for(r in 1:nrow(car)){
print(car[r])
}
for(r in 1:nrow(car)){
print(car[0])
}
for(r in 1:nrow(car)){
print(car$mpg[r])
}
for(r in 1:nrow(car)){
#print(car$mpg[r])
if(car$mpg[r] > 30){
car$status[r] = "Great"
}else if(car$mpg[r] >= 20){
car$status[r] = "Moderate"
}else{
car$status[r] = "Low"
}
}
while(x<=5){
print("Hello")
}
while(x<=5){
print("Yoga")
}
x<-0
while(x<=5){
print("Hello")
}
while(x<=5){
print("Yoga")
}
x<-5
x<-5
x<-0
while(x<=5){
print("Hello")
x<-x+1
}
while(r < nrow(car)){
print(car[r,])
r = r+1
}
r=1
while(r < nrow(car)){
print(car[r,])
r = r+1
}
car <- mtcars
summary(car, mgp,cyl)
View(car)
summary(car, mgp,cyl, disp)
summary(car, mpg, cyl, disp)
summary(car)
summary(car,mpg,cyl,disp)
summary(car, 1,2,3)
colnames(car)
summary(car,mpg,cyl,disp)
summary(car, 3,2,1)
summary(car, 1,2,3)
select(car,mpg,cyl,disp)
View(filter(car, mpg>=20))
View(filter(car, mpg>=20 , cyl==4))
View(car)
View(arrange(car, desc(mpg)))
View(arrange(car, cyl, desc(mpg)))
install.packages("dplyr")
library(dplyr)
View(arrange(car, cyl, desc(mpg)))
select(car,mpg,cyl,disp)
select(car,mpg,cyl,disp)
install.packages("RODBC")
library(RODBC)
View(arrange(car, desc(mpg)))
View(arrange(car, cyl, desc(mpg)))
distinct(car, cyl)
cars <- mtcars
View(cars)
nrow(cars)
ncol(cars)
summary(cars)
View(summary(cars))
select(cars, mpg, cyl, disp)
library(dplyr)
select(cars, mpg, cyl, disp)
select(cars, 1, 2, 3)
select(cars, 1, 2, 3, 4)
select(cars, 1, 2, 3, 4, 11)
View(cars)
View(filter(car, mpg>=20 | cyl==4))
View(filter(car, mpg>=20 , cyl==4))
# install bit wise operators
install.packages("bitops")
library(bitops)
print(bitAnd(3,2))
as.integer(intToBits(2))
as.integer(intToBits(3))
intToBits(2)
# loading the dplyr (data manipulations) library
library(dplyr)
car <- mtcars
slice(car, 3:7)
slice(car, c(3,4,2,1))
slice(car, (3,4,2,1))
slice(car, 3,4,2,1)
# mutate : this is a fucntion used to add a calculated feild
mutate(car, performance=mpg/wt)
# to add a new column assign to it
car <- mutate(car, performance=mpg/wt)
View(car)
# Transmute : This function also performs caluclations but this will supress remaining columns
transmute(car, someCalc=disp/hp)
slice(car, 3,4,2,1)
slice(car, c(3,4,2,1) # slicing specific rows
slice(car, c(3,4,2,1) # slicing specific rows
car.someCalc = transmute(car, someCalc=disp/hp)
View(car)
car.someCalc
View(car)
View(car.someCalc)
View(car.mpg)
View(car.$mpg)
View(car.mpg$)
View(car.$ mpg)
View(car)
# summarise() : used for aggregations
summarise(car, mean(mpg))
summarise(car)
summarise(car, mpg
summarise(car, mpg)
summarise(car, mpg)
summarise(car, mean(npg), min(mpg))
summarise(car, mean(mpg), min(mpg))
summarise(car, mean(mpg), min(mpg), max(mpg))
summarise(car, mean(mpg), min(mpg), max(mpg), median(mpg))
summarise(car, mean(mpg), min(mpg), max(mpg), median(mpg)
# group_by
xyz<- head(car)
xyz<- head(car)
View(xyz)
View(car)
summarise(group_by(car, cyl), mean(mpg))
View(iris)
irisDs <- iris
summarise(group_by(Species), mean(Sepel.length))
summarise(group_by(iris, Species), mean(Sepel.length))
summarise(group_by(iris, Species), mean(Sepal.Length))
summarise(group_by(iris, Species), mean(Sepal.Length), mean(Petal.Length))
car.$someCalc = transmute(car, someCalc=disp/hp)
View(car)
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLengthmean(Petal.Length))
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)))
sample_n(car, 5)
a <- select(car, mpg, wt, cyl, performance)
a
arrange(a, mpg)
arrange(select(car, mpg, wt, cyl, performance), mpg)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg)
select(car, mpg, cyl, performance, wt)
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)),
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))),
# sample_n : This function gives n number of sample data (randomly choosen)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg),
select(car, mpg, cyl, performance, wt)
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)),
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))),
# sample_n : This function gives n number of sample data (randomly choosen)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg),
select_n(car, mpg, cyl, performance, wt)
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)),
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))),
# sample_n : This function gives n number of sample data (randomly choosen)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg),
head(arrange(select(car, mpg, cyl, performance, wt), wt))
head(arrange(select(car, mpg, cyl, performance, wt), desc(wt))
head(arrange(sample_n(car, mpg, cyl, performance, wt), desc(wt)),
head(arrange(sample_n(car, mpg, cyl, performance, wt), desc(wt))
head(arrange(sample_n(car, mpg, cyl, performance, wt), desc(wt)))
head(arrange(sample_n(select(car, mpg, cyl, performance, wt), desc(wt)))
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)),
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))),
# sample_n : This function gives n number of sample data (randomly choosen)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg),
head(arrange(select(car, mpg, cyl, performance, wt), desc(wt))),
head(arrange(sample_n(select(car, mpg, cyl, performance, wt), desc(wt))))
head(arrange(sample_n(select(car, mpg, cyl, performance, wt), desc(wt)))
head(arrange(select(car, mpg, cyl, performance, wt), desc(wt), 5)
summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length)),
View(summarise(group_by(iris, Species), AVG_SepalLength=mean(Sepal.Length), AVG_PetalLength=mean(Petal.Length))),
# sample_n : This function gives n number of sample data (randomly choosen)
sample_n(car, 5),
# car dataset :-- mpg, wt, cyl, performance
# output must be sorted by mpg in ascending order
a <- select(car, mpg, wt, cyl, performance),
arrange(a, mpg),
arrange(select(car, mpg, wt, cyl, performance), mpg),
head(arrange(select(car, mpg, cyl, performance, wt), desc(wt))),
head(arrange(select(car, mpg, cyl, performance, wt), desc(wt)),5)
arrange(sample_n(select(car, mpg, cyl, performance, wt)5, desc(wt)))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5, desc(wt))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
rlang::last_error()
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
source("D:/Practice/R/20210710_Data_Manipulations_02.r")
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
%>% | car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
arrange(sample_n(select(car, mpg, cyl, performance, wt), 5), desc(wt))
car %>%select(car, mpg, cyl, performance, wt) %>% sample_n(5) %>% arrange(desc(wt))
install.packages("psych")
install.packages("vtree")
library(dplyr)
library(psych)
library(vtree)
library(ggplot2)
setwd("D:/Practice/R/20210725")
dataset = read.csv("diabetis.csv")
dataset = read.csv("diabetes.csv")
View(dataset)
head(dataset)
# Structure of dataset
str(dataset)
glimpse(dataset)
summary(dataset)
describe(dataset)
# count of columns
dim(dataset)
numCols = dim(dataset)[2]
numCols
#count missing values in each column
vector_NAs = rep(0, numCols)
vector_NAs
for (i in 1:numCols) {
vector_NAs[i] = sum(is.na(dataset[,i]))
}
vector_NAs
dataset = dataset[,-c(15,16)]
print(dim(dataset))
plot(dataset$glyhb)
plot(dataset$stab.glu)
plot(dataset$age)
barplot(table(dataset$gender))
ggplot(dataset, aes(x=gender)) + geom_bar()
ggplot(dataset, aes(x=frames)) +
geom_bar()
ggplot(dataset, aes(x=frame)) +
geom_bar()
plot(dataset$glyhb, dataset$stab.glu)
ggplot(dataset, aes(x=stab.glu, y=glyhb, color=diagnosis)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
ggplot(dataset, aes(x=stab.glu, y=glyhb, color=diagnosis)) +
geom_point() +
geom_smooth(method="lm")
dataset_numeric = dataset[,-c(7,9, 12, 18)]
View(dataset_numeric)
ggplot(dataset, aes(x=stab.glu, y=glyhb, color=diagnosis)) +
geom_point() +
geom_smooth(method="lm")
for (i in 2:14) {
hist(dataset_numeric[,i], main=names(dataset_numeric)[i])
}
par(mfrow=c(1,1))
# make all histogram and bar plots in one go
for (i in 2:14) {
hist(dataset_numeric[,i], main=names(dataset_numeric)[i])
}
par(mfrow=c(2,2)) # put 4 fig in a row
# make all histogram and bar plots in one go
for (i in 2:14) {
hist(dataset_numeric[,i], main=names(dataset_numeric)[i])
}
par(mfrow=c(2,3)) # put 4 fig in a row
# make all histogram and bar plots in one go
for (i in 2:14) {
hist(dataset_numeric[,i], main=names(dataset_numeric)[i])
}
library(dplyr)
library(psych)
library(vtree)
library(ggplot2)
library(dplyr)
library(psych)
library(vtree)
library(ggplot2)
setwd("D:/Practice/R/20210725")
dataset = read.csv("diabetes.csv")
#View the dataset
View(dataset)
dataset = read.csv("diabetes.csv")
#View the dataset
# View(dataset)
print(dataset)
# Lets have a look at the head of the data.
head(dataset)
# Structure of dataset
str(dataset)
glimpse(dataset)
# Structure of dataset
str(dataset)
#glimpse(dataset)
# Structure of dataset
glimpse(dataset)
for (i in 2:14) {
hist(dataset_numeric[,i], main=names(dataset_numeric)[i])
}
